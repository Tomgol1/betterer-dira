/* betterer-dira — Lottery Probability Calculator (client-only) */
function parseCSV(text){const rows=[];let cur='',inQuotes=false;const pushCell=(a,c)=>a.push(c.trim());const pushRow=a=>rows.push(a);let row=[];for(let i=0;i<text.length;i++){const ch=text[i];const next=text[i+1];if(ch==='"'){if(inQuotes&&next==='"'){cur+='"';i++;}else{inQuotes=!inQuotes;}}else if(ch===','&&!inQuotes){pushCell(row,cur);cur='';}else if((ch==='\n'||ch==='\r')&&!inQuotes){if(cur.length>0||row.length>0){pushCell(row,cur);cur='';pushRow(row);row=[];}if(ch==='\r'&&next===`\n`){i++;}}else{cur+=ch;}}if(cur.length>0||row.length>0){pushCell(row,cur);pushRow(row);}return rows;}
const REQUIRED_HEADERS=["Name","City","Total_Houses","Applicants","Wheelchair_Houses","Wheelchair_Applicants","Combat_Houses","Combat_Applicants","Reserve_Houses","Reserve_Applicants","Local_Houses","Local_Applicants"];
function toNumber(v){const n=Number(String(v).replace(/[, ]+/g,''));return Number.isFinite(n)?n:NaN;}
function validateAndNormalize(rows){if(!rows||rows.length===0)return{errors:["Empty CSV"],data:[]};const header=rows[0].map(h=>h.trim());const missing=REQUIRED_HEADERS.filter(h=>!header.includes(h));if(missing.length)return{errors:["Missing headers: "+missing.join(", ")],data:[]};const idx=Object.fromEntries(REQUIRED_HEADERS.map(h=>[h,header.indexOf(h)]));const data=[],errors=[];for(let r=1;r<rows.length;r++){const raw=rows[r];if(raw.length===1&&raw[0]==="")continue;const rec={};for(const h of REQUIRED_HEADERS)rec[h]=raw[idx[h]]??"";const numericFields=REQUIRED_HEADERS.filter(h=>!["Name","City"].includes(h));for(const f of numericFields)rec[f]=toNumber(rec[f]);const bad=numericFields.filter(f=>!Number.isFinite(rec[f])||rec[f]<0);if(bad.length){errors.push(`Row ${r+1}: invalid numbers in ${bad.join(", ")}`);continue;}const designated=rec.Wheelchair_Houses+rec.Combat_Houses+rec.Reserve_Houses+rec.Local_Houses;if(designated>rec.Total_Houses){errors.push(`Row ${r+1}: designated houses (${designated}) exceed Total_Houses (${rec.Total_Houses}).`);continue;}const prefA=rec.Wheelchair_Applicants+rec.Combat_Applicants+rec.Reserve_Applicants+rec.Local_Applicants;if(prefA>rec.Applicants){errors.push(`Row ${r+1}: preferred applicants (${prefA}) exceed Applicants (${rec.Applicants}).`);continue;}data.push(rec);}return{errors,data};}
function computeLottery(rec){const TH=rec.Total_Houses,A=rec.Applicants;const D_h=rec.Wheelchair_Houses,D_a=rec.Wheelchair_Applicants;const C_h=rec.Combat_Houses,C_a=rec.Combat_Applicants;const R_h=rec.Reserve_Houses,R_a=rec.Reserve_Applicants;const L_h=rec.Local_Houses,L_a=rec.Local_Applicants;const designated=D_h+C_h+R_h+L_h;const regularHouses=Math.max(0,TH-designated);const used_dis=Math.min(D_h,D_a),unclaimed_dis=D_h-used_dis;const used_com=Math.min(C_h,C_a),unclaimed_com=C_h-used_com;const used_loc=Math.min(L_h,L_a),unclaimed_loc=L_h-used_loc;const reserve_available=R_h+unclaimed_com;const used_res=Math.min(reserve_available,R_a);const unclaimed_res=reserve_available-used_res;const generalPoolHouses=unclaimed_dis+unclaimed_res+unclaimed_loc+regularHouses;const regularApplicants=Math.max(0,A-(D_a+C_a+R_a+L_a));const overflow_dis=Math.max(0,D_a-D_h);const overflow_com=Math.max(0,C_a-C_h);const overflow_res=Math.max(0,R_a-reserve_available);const overflow_loc=Math.max(0,L_a-L_h);const totalCompetitors=regularApplicants+overflow_dis+overflow_com+overflow_res+overflow_loc;const pLottery=totalCompetitors>0?Math.min(1,generalPoolHouses/totalCompetitors):0;return{regularHouses,generalPoolHouses,totalCompetitors,pLottery};}
function combineIndependent(p){return 1-p.reduce((a,x)=>a*(1-x),1);}
const state={records:[],perLottery:[],perCity:[],selectedCities:new Set()};
function formatPct(x){return Number.isFinite(x)?(x*100).toFixed(2)+"%":"—";}
function renderTable(id,rows){const el=document.getElementById(id);if(!rows.length){el.innerHTML="<p class='muted'>No data.</p>";return;}const headers=Object.keys(rows[0]);const thead="<thead><tr>"+headers.map(h=>`<th>${h}</th>`).join("")+"</tr></thead>";const tbody="<tbody>"+rows.map(r=>"<tr>"+headers.map(h=>`<td>${r[h]}</td>`).join("")).join("")+"</tr></tbody>";el.innerHTML=`<div class="tablewrap"><table>${thead}${tbody}</table></div>`;}
function renderCitySelector(cities){const el=document.getElementById("citySelector");if(!cities.length){el.innerHTML="<p class='muted'>Load data first.</p>";return;}const items=cities.map(c=>{const checked=state.selectedCities.has(c)?"checked":"";return `<label class="chip"><input type="checkbox" value="${c}" ${checked} /> ${c}</label>`;}).join("");el.innerHTML=`<div class="chips">${items}</div><p class="muted">Select up to 3 cities. Selecting a city means you participate in all its lotteries.</p>`;el.querySelectorAll('input[type="checkbox"]').forEach(cb=>{cb.addEventListener('change',(e)=>{const c=e.target.value;if(e.target.checked){if(state.selectedCities.size>=3){e.target.checked=false;alert("You can select at most 3 cities.");return;}state.selectedCities.add(c);}else{state.selectedCities.delete(c);}computeAndRender();});});}
function computeAndRender(){state.perLottery=state.records.map(rec=>{const m=computeLottery(rec);return{ Name:rec.Name, City:rec.City, Total_Houses:rec.Total_Houses, Applicants:rec.Applicants, GeneralPool_Houses:m.generalPoolHouses, Competitors:m.totalCompetitors, P_Win_Lottery:formatPct(m.pLottery)};});renderTable("results",state.perLottery);const byCity={};state.records.forEach(rec=>(byCity[rec.City]??=[]).push(computeLottery(rec).pLottery));state.perCity=Object.entries(byCity).map(([city,ps])=>({City:city,Lotteries:ps.length,P_Win_At_Least_One:formatPct(combineIndependent(ps))}));const selected=[...state.selectedCities];const selectedCityPs=selected.map(c=>combineIndependent(byCity[c]||[]));const overall=selected.length?combineIndependent(selectedCityPs):0;const combined=[{Scope:"Overall (selected cities)",Detail:selected.join(" | ")||"—",Probability:formatPct(overall)},...state.perCity.map(r=>({Scope:"City",Detail:r.City,Probability:r.P_Win_At_Least_One}))];const res=document.getElementById("results");res.innerHTML+=`<h3>City & Overall</h3>`;const headers=Object.keys(combined[0]);const thead="<thead><tr>"+headers.map(h=>`<th>${h}</th>`).join("")+"</tr></thead>";const tbody="<tbody>"+combined.map(r=>"<tr>"+headers.map(h=>`<td>${r[h]}</td>`).join("")).join("")+"</tr></tbody>";res.innerHTML+=`<div class="tablewrap"><table>${thead}${tbody}</table></div>`;document.getElementById("exportResults").disabled=state.perLottery.length===0;}
function toCSV(rows){const headers=Object.keys(rows[0]||{});const esc=s=>{const str=String(s??"");return /[\",\n]/.test(str)?'"'+str.replace(/"/g,'""')+'"':str;};const lines=[headers.join(",")];for(const r of rows)lines.push(headers.map(h=>esc(r[h])).join(","));return lines.join("\n");}
document.addEventListener("DOMContentLoaded",()=>{const fileInput=document.getElementById("fileInput");const loadSampleBtn=document.getElementById("loadSample");const loadMsg=document.getElementById("loadMsg");const errorsDiv=document.getElementById("validationErrors");const exportBtn=document.getElementById("exportResults");const dl=document.getElementById("downloadLink");function handleCSVText(text){errorsDiv.textContent="";const rows=parseCSV(text);const {errors,data}=validateAndNormalize(rows);if(errors.length){errorsDiv.innerHTML="<ul>"+errors.map(e=>`<li>${e}</li>`).join("")+"</ul>";document.getElementById("dataTable").innerHTML="";document.getElementById("citySelector").innerHTML="";document.getElementById("results").innerHTML="";state.records=[];state.selectedCities.clear();return;}state.records=data;const preview=data.map(r=>({Name:r.Name,City:r.City,Total_Houses:r.Total_Houses,Applicants:r.Applicants,Wheelchair_Houses:r.Wheelchair_Houses,Wheelchair_Applicants:r.Wheelchair_Applicants,Combat_Houses:r.Combat_Houses,Combat_Applicants:r.Combat_Applicants,Reserve_Houses:r.Reserve_Houses,Reserve_Applicants:r.Reserve_Applicants,Local_Houses:r.Local_Houses,Local_Applicants:r.Local_Applicants}));const el=document.getElementById("dataTable");const headers=Object.keys(preview[0]||{});const thead="<thead><tr>"+headers.map(h=>`<th>${h}</th>`).join("")+"</tr></thead>";const tbody="<tbody>"+preview.map(r=>"<tr>"+headers.map(h=>`<td>${r[h]}</td>`).join("")).join("")+"</tr></tbody>";el.innerHTML=`<div class="tablewrap"><table>${thead}${tbody}</table></div>`;const cities=[...new Set(data.map(r=>r.City))].sort();state.selectedCities.clear();renderCitySelector(cities);document.getElementById("results").innerHTML="";computeAndRender();}
fileInput.addEventListener("change",(e)=>{const f=e.target.files?.[0];if(!f)return;const reader=new FileReader();reader.onload=()=>{loadMsg.textContent=`Loaded file: ${f.name}`;handleCSVText(String(reader.result));};reader.readAsText(f);});loadSampleBtn.addEventListener("click",async()=>{const sample=`Name,City,Total_Houses,Applicants,Wheelchair_Houses,Wheelchair_Applicants,Combat_Houses,Combat_Applicants,Reserve_Houses,Reserve_Applicants,Local_Houses,Local_Applicants
Example A,Alpha,250,2508,8,1,37,0,50,0,50,265
Example B,Alpha,120,1300,5,7,10,12,12,40,0,0
Example C,Beta,90,600,0,0,5,2,8,3,10,70
Example D,Gamma,300,3000,3,6,15,20,20,10,40,50`;loadMsg.textContent="Loaded built-in sample data.";handleCSVText(sample);});exportBtn.addEventListener("click",()=>{if(!state.perLottery.length)return;const outRows=state.perLottery.map(r=>({Name:r.Name,City:r.City,P_Win_Lottery:r.P_Win_Lottery}));const resDiv=document.getElementById("results");const tdText=[...resDiv.querySelectorAll("table td")].map(td=>td.textContent);const idx=tdText.indexOf("Overall (selected cities)");const overallPct=idx>=0?tdText[idx+2]:"0%";const csv=toCSV(outRows.concat([{Name:"(overall)",City:[...state.selectedCities].join(" | ")||"—",P_Win_Lottery:overallPct}]));const blob=new Blob([csv],{type:"text/csv"});const url=URL.createObjectURL(blob);dl.href=url;dl.download="lottery_results.csv";dl.classList.remove("hidden");dl.textContent="Download results CSV";});});